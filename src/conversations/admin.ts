// src/conversations/admin.ts
import { Conversation } from "@grammyjs/conversations";
import { MyContext } from "../types";
import { getUsers } from "../services/firebase";

export async function adminConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext,
) {
  await ctx.reply(
    "üì¢ *–†–µ–∂–∏–º —Ä–æ–∑—Å–∏–ª–∫–∏*\n\n" +
      "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n" +
      "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≥—Ä—É–ø–∞ –º–µ–¥—ñ–∞.\n\n" +
      "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
    { parse_mode: "Markdown" },
  );

  const message = await conversation.wait();

  if (message.message?.text === "/cancel") {
    await ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
    return;
  }

  const users = await getUsers();

  await ctx.reply(
    `üë• –ó–Ω–∞–π–¥–µ–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n` +
      `–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?\n` +
      `–ù–∞–¥—ñ—à–ª—ñ—Ç—å "–¢–∞–∫" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`,
  );

  const confirmation = await conversation.wait();

  if (confirmation.message?.text?.toLowerCase() !== "—Ç–∞–∫") {
    await ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
    return;
  }

  // –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
  await ctx.reply("üöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...");

  let successCount = 0;
  let failCount = 0;
  const failedUsers: string[] = [];

  for (const user of users) {
    try {
      await copyMessageToUser(ctx, message.message!, user.login || user.userId);
      successCount++;

      await new Promise((resolve) => setTimeout(resolve, 50));
    } catch (error) {
      console.error(`Failed to send to ${user.userId}:`, error);
      failCount++;
      failedUsers.push(user.username || user.userId);
    }
  }

  // –ó–≤—ñ—Ç –ø—Ä–æ —Ä–æ–∑—Å–∏–ª–∫—É
  let report =
    `‚úÖ *–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `‚Ä¢ –£—Å–ø—ñ—à–Ω–æ: ${successCount}\n` +
    `‚Ä¢ –ü–æ–º–∏–ª–æ–∫: ${failCount}`;

  await ctx.reply(report);
}

async function copyMessageToUser(ctx: MyContext, message: any, userId: string) {
  const bot = ctx.api;

  // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  if (message.text) {
    await bot.sendMessage(userId, message.text, {
      entities: message.entities,
    });
  } else if (message.photo) {
    const photo = message.photo[message.photo.length - 1].file_id;
    await bot.sendPhoto(userId, photo, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else if (message.video) {
    await bot.sendVideo(userId, message.video.file_id, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else if (message.document) {
    await bot.sendDocument(userId, message.document.file_id, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else if (message.audio) {
    await bot.sendAudio(userId, message.audio.file_id, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else if (message.voice) {
    await bot.sendVoice(userId, message.voice.file_id, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else if (message.sticker) {
    await bot.sendSticker(userId, message.sticker.file_id);
  } else if (message.video_note) {
    await bot.sendVideoNote(userId, message.video_note.file_id);
  } else if (message.animation) {
    await bot.sendAnimation(userId, message.animation.file_id, {
      caption: message.caption,
      caption_entities: message.caption_entities,
    });
  } else {
    throw new Error("Unsupported message type");
  }
}
