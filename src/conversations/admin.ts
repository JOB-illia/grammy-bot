// newsletter.ts
import { getUsers } from "../services/firebase";

// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω-—Ñ–ª–æ—É
export type AdminState = {
  step: "awaitContent" | "awaitButtons" | "awaitAudience" | "awaitMinLesson" | "awaitConfirm";
  payload?: any;           // –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ (text/photo/video/...)
  filteredUsers?: any[];   // –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  minLesson?: number;      // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —É—Ä–æ–∫ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  keyboard?: any | null;   // inline_keyboard (reply_markup)
};

// –•–µ–ª–ø–µ—Ä: —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ –¥–µ—Ñ–æ–ª—Ç
function resetState(state: AdminState) {
  state.step = "awaitContent";
  state.payload = undefined;
  state.filteredUsers = undefined;
  state.minLesson = undefined;
  state.keyboard = null;
}

// –•–µ–ª–ø–µ—Ä: –ø–æ–±—É–¥–æ–≤–∞ reply_markup –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –∞–¥–º—ñ–Ω–∞
// –§–æ—Ä–º–∞—Ç —Ä—è–¥–∫—ñ–≤: "–¢–µ–∫—Å—Ç -> payload"
// payload –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ URL, –∞–±–æ callback_data
function buildInlineKeyboardFromText(input: string) {
  const lines = input
    .split("\n")
    .map((s) => s.trim())
    .filter(Boolean);

  const inline_keyboard: any[][] = [];

  for (const line of lines) {
    const [labelPart, payloadPart] = line.split("->").map((s) => s?.trim());
    if (!labelPart || !payloadPart) continue;

    if (/^https?:\/\//i.test(payloadPart)) {
      inline_keyboard.push([{ text: labelPart, url: payloadPart }]);
    } else {
      // ‚ö†Ô∏è Telegram limit: callback_data –¥–æ ~64 –±–∞–π—Ç
      inline_keyboard.push([{ text: labelPart, callback_data: payloadPart }]);
    }
  }

  if (!inline_keyboard.length) return null;
  return { inline_keyboard };
}

export async function handleNewsletter(ctx: any, state: AdminState) {
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏ (–∑–∞–ª–∏—à–∏–≤ —è–∫ —É –≤–∞—Å)
  console.log(ctx.msg?.text, ctx);
  console.log(state.step, state);

  // –ì–ª–æ–±–∞–ª—å–Ω–∏–π cancel
  if ((ctx.msg?.text ?? "").trim().toLowerCase() === "/cancel") {
    await ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
    resetState(state);
    return;
  }

  switch (state.step) {
    // 1) –ß–µ–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    case "awaitContent": {
      const msg = ctx.update?.message;

      if (!msg) {
        await ctx.reply("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç/–º–µ–¥—ñ–∞) –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.");
        return;
      }

      state.payload = msg;
      state.step = "awaitButtons";

      await ctx.reply(
        "‚ûï –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏?\n" +
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
        "  –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ -> next:webinar-yes\n" +
        "–ö—ñ–ª—å–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚Äî –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.\n" +
        "–ù–∞–ø–∏—à—ñ—Ç—å '–Ω—ñ' —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏."
      );

      return;
    }

    // 2) –ß–µ–∫–∞—î–º–æ –æ–ø–∏—Å –∫–Ω–æ–ø–æ–∫ –∞–±–æ –ø—Ä–æ–ø—É—Å–∫
    case "awaitButtons": {
      const raw = (ctx.msg?.text ?? "").trim();

      if (raw && raw.toLowerCase() !== "–Ω—ñ") {
        state.keyboard = buildInlineKeyboardFromText(raw);


        console.log('BUTTONS', JSON.stringify(state.keyboard, null, 2));

        if (!state.keyboard) {
          await ctx.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏. –ü—Ä–æ–ø—É—â—É —Ü–µ–π –∫—Ä–æ–∫.");
        }
      } else {
        state.keyboard = null;
      }

      state.step = "awaitAudience";
      await ctx.reply(
        "üéØ –û–±–µ—Ä—ñ—Ç—å –∞—É–¥–∏—Ç–æ—Ä—ñ—é:\n" +
        "1Ô∏è‚É£ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n" +
        "2Ô∏è‚É£ –¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ\n" +
        "3Ô∏è‚É£ –•—Ç–æ –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç–∏\n" +
        "4Ô∏è‚É£ –ó–∞ –ø—Ä–æ–≥—Ä–µ—Å–æ–º –∫—É—Ä—Å—É\n\n" +
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä."
      );
      return;
    }

    // 3) –í–∏–±—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
    case "awaitAudience": {
      const choice = ctx.msg?.text?.trim();
      if (!["1", "2", "3", "4"].includes(choice)) {
        await ctx.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ù–∞–¥—ñ—à–ª—ñ—Ç—å 1, 2, 3 –∞–±–æ 4.");
        return;
      }

      let targetUsers = await getUsers();

      if (choice === "2") {
        targetUsers = targetUsers.filter((u: any) => u.isActive);
      }
      if (choice === "3") {
        await ctx.reply("‚è≥ –®—É–∫–∞—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–æ–π–¥–µ–Ω–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏...");
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤ –æ–∫—Ä–µ–º–æ –≤—ñ–¥ session
        targetUsers = targetUsers.filter((u: any) => u.hasPassedTests === true);
      }
      if (choice === "4") {
        state.step = "awaitMinLesson";
        state.filteredUsers = targetUsers;
        await ctx.reply("üìä –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 5):");
        return;
      }

      state.filteredUsers = targetUsers;
      state.step = "awaitConfirm";
      await ctx.reply(
        `üë• –ö-—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${targetUsers.length}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å "–¢–∞–∫" –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∞–±–æ /cancel.`
      );
      return;
    }

    // 3b) –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º —É—Ä–æ–∫–æ–º
    case "awaitMinLesson": {
      const min = parseInt(ctx.msg?.text ?? "", 10);
      if (!Number.isFinite(min) || min < 0) {
        await ctx.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ. –°–∫–∞—Å—É–≤–∞–≤.");
        resetState(state);
        return;
      }

      state.minLesson = min;
      const users = (state.filteredUsers ?? []).filter(
        (u: any) => Number(u?.currentDay ?? 0) >= min
      );

      state.filteredUsers = users;
      state.step = "awaitConfirm";

      await ctx.reply(
        `üë• –ö-—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å "–¢–∞–∫" –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∞–±–æ /cancel.`
      );
      return;
    }

    // 4) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
    case "awaitConfirm": {
      const ok = (ctx.msg?.text ?? "").trim().toLowerCase();
      if (ok !== "—Ç–∞–∫") {
        await ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
        resetState(state);
        return;
      }

      const users = state.filteredUsers ?? [];
      const reply_markup = state.keyboard ?? state.payload?.reply_markup ?? undefined;

      await ctx.reply("üöÄ –°—Ç–∞—Ä—Ç—É—é —Ä–æ–∑—Å–∏–ª–∫—É...");
      let success = 0,
        fail = 0;
      const failed: string[] = [];

      for (const user of users) {
        try {
          await copyMessageToUser(ctx, state.payload, user.userId, reply_markup);
          success++;
          // –¢—Ä–æ—Ö–∏ —Ç—Ä–æ—Ç–ª—ñ–Ω–≥—É, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç—ñ–≤
          await new Promise((r) => setTimeout(r, 50));
        } catch (e) {
          console.error(`Failed to ${user.userId}`, e);
          fail++;
          failed.push(user.username || user.userId);
        }
      }

      let report = `‚úÖ –ì–æ—Ç–æ–≤–æ!\n–£—Å–ø—ñ—à–Ω–æ: ${success}\n–ü–æ–º–∏–ª–æ–∫: ${fail}`;
      if (failed.length && failed.length <= 10) {
        report += `\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${failed.join(", ")}`;
      }
      await ctx.reply(report);

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ–ª–æ—É
      resetState(state);
      return;
    }
  }
}

// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é reply_markup (—ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫)
export async function copyMessageToUser(
  ctx: any,
  message: any,
  userId: string,
  reply_markup?: any
) {
  const bot = ctx.api;

  // –î–ª—è —Ç–µ–∫—Å—Ç—É ‚Äî –ø—Ä–æ–∫–∏–¥—É—î–º–æ entities —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
  if (message.text) {
    await bot.sendMessage(userId, message.text, {
      entities: message.entities,
      reply_markup,
    });
    return;
  }

  if (message.caption || message.photo || message.video || message.document || message.audio || message.voice || message.sticker || message.video_note || message.animation) {
    if (message.photo) {
      const photo = message.photo.at(-1).file_id;
      await bot.sendPhoto(userId, photo, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
    if (message.video) {
      await bot.sendVideo(userId, message.video.file_id, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
    if (message.document) {
      await bot.sendDocument(userId, message.document.file_id, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
    if (message.audio) {
      await bot.sendAudio(userId, message.audio.file_id, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
    if (message.voice) {
      await bot.sendVoice(userId, message.voice.file_id, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
    if (message.sticker) {
      await bot.sendSticker(userId, message.sticker.file_id, {
        reply_markup,
      });
      return;
    }
    if (message.video_note) {
      await bot.sendVideoNote(userId, message.video_note.file_id, {
        reply_markup,
      });
      return;
    }
    if (message.animation) {
      await bot.sendAnimation(userId, message.animation.file_id, {
        caption: message.caption,
        caption_entities: message.caption_entities,
        reply_markup,
      });
      return;
    }
  }

  throw new Error("Unsupported message type");
}
