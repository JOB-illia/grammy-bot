import { Conversation } from "@grammyjs/conversations";
import { MyContext } from "../types";
import {
  getActiveOrders,
  getActivePotentialOrders,
} from "../services/firebase";
import { sendEmail } from "../services/emailService";

const PROGRESS_EVERY = 10; // –∫–æ–∂–Ω—ñ N –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å —à–ª–µ–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç —É —á–∞—Ç

export async function emailBroadcastConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext,
) {
  // 1) –î–∂–µ—Ä–µ–ª–æ –±–∞–∑–∏
  await ctx.reply(
    "üì¶ –û–±–µ—Ä—ñ—Ç—å –±–∞–∑—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n‚Ä¢ –í–≤–µ–¥—ñ—Ç—å `orders` –∞–±–æ `potentialOrders`\n–ê–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
  );
  const baseMsg = await conversation.wait();

  if (baseMsg.message?.text === "/cancel")
    return void ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");

  const baseChoice = (baseMsg.message?.text || "").trim().toLowerCase();
  if (!["orders", "potentialorders"].includes(baseChoice)) {
    await ctx.reply(
      "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –î–æ—Å—Ç—É–ø–Ω—ñ: `orders` –∞–±–æ `potentialOrders`.",
    );
    return;
  }

  // 2) –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
  await ctx.reply(
    "üß™ –¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫?\n" +
      "‚Ä¢ –í–≤–µ–¥—ñ—Ç—å `—Ç–∞–∫` ‚Äî –Ω–∞–¥—ñ—à–ª—é –õ–ò–®–ï –Ω–∞ job.klenchys.i@gmail.com\n" +
      "‚Ä¢ –í–≤–µ–¥—ñ—Ç—å `–Ω—ñ` ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ –≤–∏–±—Ä–∞–Ω—ñ–π –±–∞–∑—ñ\n–ê–±–æ /cancel.",
  );
  const testMsg = await conversation.wait();
  if (testMsg.message?.text === "/cancel")
    return void ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");

  const isTest = (testMsg.message?.text || "").trim().toLowerCase() === "—Ç–∞–∫";

  // 3) –¢–µ–º–∞
  await ctx.reply("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –ª–∏—Å—Ç–∞ (–∞–±–æ /cancel):");
  const subjectMsg = await conversation.wait();
  if (subjectMsg.message?.text === "/cancel")
    return void ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");

  const subject = (subjectMsg.message?.text || "").trim();
  if (!subject) {
    await ctx.reply("‚ö†Ô∏è –¢–µ–º–∞ –ø–æ—Ä–æ–∂–Ω—è. –°–∫–∞—Å–æ–≤—É—é.");
    return;
  }

  // 4) –ö–æ–Ω—Ç–µ–Ω—Ç (–ø–æ–≤–Ω–∏–π HTML)
  await ctx.reply(
    "üß© –í—Å—Ç–∞–≤—Ç–µ *–ø–æ–≤–Ω–∏–π HTML* –ª–∏—Å—Ç–∞ (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ `<!DOCTYPE ...>` –∞–±–æ `<html>`).\n" +
      "–ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ *—Ç–µ–∫—Å—Ç–æ–º* –∞–±–æ *—Ñ–∞–π–ª–æ–º .html*.\n–í–≤–µ–¥—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
    { parse_mode: "Markdown" },
  );

  const contentMsg = await conversation.wait();
  if (contentMsg.message?.text === "/cancel")
    return void ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");

  // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —è–∫ —Ç–µ–∫—Å—Ç—É, —Ç–∞–∫ —ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ .html
  let html = "";
  if (contentMsg.message?.document) {
    // —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —Ñ–∞–π–ª ‚Äî –≤–∏—Ç—è–≥–Ω–µ–º–æ —Ç–µ–∫—Å—Ç
    const file = await ctx.api.getFile(contentMsg.message.document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${ctx.api.token}/${file.file_path}`;

    const res = await fetch(fileUrl);
    html = await res.text();
  } else {
    html = contentMsg.message?.text || "";
  }

  if (!html.toLowerCase().includes("<html")) {
    await ctx.reply(
      "‚ö†Ô∏è –°—Ö–æ–∂–µ, —Ü–µ –Ω–µ –ø–æ–≤–Ω–∏–π HTML (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ `<html>`). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
    );
    return;
  }

  // 5) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  await ctx.reply(
    [
      "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º:",
      `‚Ä¢ –ë–∞–∑–∞: *${baseChoice}*`,
      `‚Ä¢ –†–µ–∂–∏–º: *${isTest ? "–¢–ï–°–¢" : "–ë–û–ô"}*`,
      `‚Ä¢ –¢–µ–º–∞: *${escapeMd(subject)}*`,
      `‚Ä¢ HTML –¥–æ–≤–∂–∏–Ω–∞: *${html.length.toLocaleString()}*`,
      "",
      "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å `–¢–∞–∫` –∞–±–æ /cancel.",
    ].join("\n"),
    { parse_mode: "Markdown" },
  );

  const confirmMsg = await conversation.wait();
  if (confirmMsg.message?.text?.toLowerCase() !== "—Ç–∞–∫") {
    return void ctx.reply("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
  }

  // 6) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –µ–º–µ–π–ª—ñ–≤
  let recipients: {
    email?: string;
    firstName?: string;
    username?: string;
    userId?: string;
  }[] = [];

  if (isTest) {
    recipients = [{ email: "job.klenchys.i@gmail.com" }];
  } else {
    recipients =
      baseChoice === "orders"
        ? await getActiveOrders()
        : await getActivePotentialOrders();
  }

  const total = recipients.filter((u) => !!u.email).length;
  if (!total) {
    await ctx.reply("üòï –£ –≤–∏–±—Ä–∞–Ω—ñ–π –±–∞–∑—ñ –Ω–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö email.");
    return;
  }

  await ctx.reply(`üöÄ –°—Ç–∞—Ä—Ç—É—é —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞ ${total} –∞–¥—Ä–µ—Å...`);

  // 7) –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ –ª–æ–≥–∞–º–∏
  let success = 0;
  let fail = 0;
  const failed: string[] = [];

  for (let i = 0; i < recipients.length; i++) {
    const user = recipients[i];
    const to = (user.email || "").trim();
    if (!to) continue;

    try {
      await sendEmail({
        to,
        subject,
        html, // –∫–ª—é—á–æ–≤–µ: —à–ª–µ–º–æ —Ç–µ, —â–æ –≤–∏ –≤—Å—Ç–∞–≤–∏–ª–∏
        userName: user.firstName || user.username || "",
      });
      success++;
    } catch (err) {
      fail++;
      failed.push(to);
    }

    // –ö–æ–∂–Ω—ñ PROGRESS_EVERY ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç
    const processed = success + fail;
    if (processed % PROGRESS_EVERY === 0 || processed === total) {
      await ctx.reply(
        `üìä –ü—Ä–æ–≥—Ä–µ—Å: ${processed}/${total}\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${success}\n‚ùå –ü–æ–º–∏–ª–æ–∫: ${fail}`,
      );
    }
  }

  // 8) –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
  const lines = [
    "üèÅ *–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*",
    `‚Ä¢ –í—Å—å–æ–≥–æ: ${total}`,
    `‚Ä¢ ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${success}`,
    `‚Ä¢ ‚ùå –ü–æ–º–∏–ª–æ–∫: ${fail}`,
  ];

  if (failed.length) {
    const preview = failed.slice(0, 15).join("\n");
    lines.push("", "*–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–ø–µ—Ä—à—ñ 15):*", "```\n" + preview + "\n```");
    if (failed.length > 15) lines.push(`... —ñ —â–µ ${failed.length - 15}`);
  }

  await ctx.reply(lines.join("\n"), { parse_mode: "Markdown" });
}

function escapeMd(s: string) {
  return s.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");
}
