// src/services/whatsapp360.ts
// Cloud-—Å—É–º—ñ—Å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è 360dialog (waba-v2.360dialog.io)

type LanguageCode = "pl" | "pl_PL" | "uk" | "en" | "ru" | string;

export interface WhatsApp360Config {
  apiUrl?: string; // default: https://waba-v2.360dialog.io
  apiKey: string; // –∑–∞–≥–æ–ª–æ–≤–æ–∫ D360-API-KEY
  defaultLanguage?: LanguageCode; // default: "pl"
  testMode?: boolean; // dry-run (–ª–æ–≥ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)
  testRecipient?: string; // –∫—É–¥–∏ —Å–ª–∞—Ç–∏ —É testMode
  rateLimitMs?: number; // –ø–∞—É–∑–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏ —É –±–∞—Ç—á—ñ (–¥–æ–¥–∞—Ç–∫–æ–≤–∞)
  maxRetries?: number; // —Ä–µ—Ç—Ä–∞—ó 429/5xx
  templatesTtlMs?: number; // TTL –∫–µ—à—É —à–∞–±–ª–æ–Ω—ñ–≤ (default 30 —Ö–≤)
}

export interface TemplateMessage {
  to: string; // E.164 –±–µ–∑ '+', –Ω–∞–ø—Ä. "48575784438"
  name: string; // –Ω–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É, –Ω–∞–ø—Ä. "new_tarif"
  language?: LanguageCode; // –Ω–∞–ø—Ä. "pl" –∞–±–æ "pl_PL"
  bodyParams?: string[]; // (–Ω–∞ –º–∞–π–±—É—Ç–Ω—î) —è–∫—â–æ –¥–æ–¥–∞—Å–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
  buttonParams?: string[]; // (–Ω–∞ –º–∞–π–±—É—Ç–Ω—î) –¥–ª—è dynamic URL –∫–Ω–æ–ø–æ–∫
}

export interface TextMessage {
  to: string;
  body: string;
  previewUrl?: boolean;
}

type WabaTemplate = {
  name: string;
  language: string;
  status: string; // "approved"
  category?: string;
  components?: any[];
};

export class WhatsApp360 {
  private apiUrl: string;
  private apiKey: string;
  private lang: LanguageCode;
  private dryRun: boolean;
  private testRecipient?: string;
  private maxRetries: number;
  private templatesTtlMs: number;

  // –ö–µ—à —à–∞–±–ª–æ–Ω—ñ–≤
  private templatesCache: { at: number; list: WabaTemplate[] } | null = null;

  constructor(cfg: WhatsApp360Config) {
    this.apiUrl = (cfg.apiUrl ?? "https://waba-v2.360dialog.io").replace(
      /\/+$/,
      "",
    );
    this.apiKey = cfg.apiKey;
    this.lang = cfg.defaultLanguage ?? "pl";
    this.dryRun = !!cfg.testMode;
    this.testRecipient = cfg.testRecipient;
    this.maxRetries = cfg.maxRetries ?? 3;
    this.templatesTtlMs = cfg.templatesTtlMs ?? 30 * 60 * 1000; // 30 —Ö–≤
  }

  // ===== Utils =====
  private sleep(ms: number) {
    return new Promise((r) => setTimeout(r, ms));
  }

  private async callApi(
    path: string,
    payload: any,
    label: string,
  ): Promise<void> {
    if (this.dryRun) {
      console.log(`[WA:DRY-RUN] ${label}`, JSON.stringify(payload, null, 2));
      return;
    }

    let attempt = 0;
    while (true) {
      attempt++;
      const res = await fetch(`${this.apiUrl}${path}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "D360-API-KEY": this.apiKey,
        },
        body: JSON.stringify(payload),
      });

      const text = await res.text().catch(() => "");
      const status = res.status;

      if (res.ok) {
        console.log(`[WA ‚úÖ] ${label} OK (${status})`);
        return;
      }

      // –†–µ—Ç—Ä–∞—ó–º–æ 429/5xx
      const isTransient = status === 429 || (status >= 500 && status < 600);
      if (isTransient && attempt <= this.maxRetries) {
        // Backoff + –Ω–µ–≤–µ–ª–∏–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞
        const backoff = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
        console.warn(
          `[WA] ${label} failed (${status}). Retry in ${backoff}ms. Body: ${text}`,
        );
        await this.sleep(backoff);
        continue;
      }

      console.error(`[WA] ${label} failed (${status}): ${text}`);
      throw new Error(`[WA] ${label} failed (${status}): ${text}`);
    }
  }

  private templatesCacheValid(): boolean {
    return (
      !!this.templatesCache &&
      Date.now() - this.templatesCache.at < this.templatesTtlMs
    );
  }

  private async getTemplatesFromApi(): Promise<WabaTemplate[]> {
    const res = await fetch(`${this.apiUrl}/v1/configs/templates`, {
      method: "GET",
      headers: { "D360-API-KEY": this.apiKey },
    });
    const raw = await res.text();

    if (res.status === 429) throw new Error(`TEMPLATES_RATE_LIMIT: ${raw}`);
    if (!res.ok)
      throw new Error(`TEMPLATES_FETCH_FAILED ${res.status}: ${raw}`);

    let json: any = {};
    try {
      json = JSON.parse(raw);
    } catch {
      return [];
    }

    if (Array.isArray(json?.waba_templates))
      return json.waba_templates as WabaTemplate[];
    if (Array.isArray(json?.data)) return json.data as WabaTemplate[];
    if (Array.isArray(json?.templates)) return json.templates as WabaTemplate[];
    return [];
  }

  /** –í–∏–∫–ª–∏—á –î–û —Ä–æ–∑—Å–∏–ª–∫–∏ ‚Äî –∑–∞–∫–µ—à—É—î —à–∞–±–ª–æ–Ω–∏, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ 429 —É —Ü–∏–∫–ª—ñ */
  async primeTemplates(): Promise<void> {
    try {
      const list = await this.getTemplatesFromApi();
      this.templatesCache = { at: Date.now(), list };
      console.log(`[WA] Templates cached: ${list.length}`);
    } catch (e: any) {
      if (String(e?.message || "").startsWith("TEMPLATES_RATE_LIMIT")) {
        console.warn("[WA] primeTemplates hit 429 ‚Äî proceed without refresh");
      } else {
        console.warn("[WA] primeTemplates failed:", e?.message || e);
      }
    }
  }

  private findTemplateInCache(name: string, lang: string): WabaTemplate | null {
    if (!this.templatesCacheValid()) return null;
    const list = this.templatesCache!.list;
    return (
      list.find((t) => t.name === name && t.language === lang) ||
      list.find((t) => t.name === name) ||
      null
    );
  }

  // ===== Senders =====

  /** Cloud-—Ñ–æ—Ä–º–∞—Ç TEXT */
  async sendText(msg: TextMessage): Promise<void> {
    const to = this.dryRun && this.testRecipient ? this.testRecipient : msg.to;
    const payload = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to,
      type: "text",
      text: { body: msg.body, preview_url: !!msg.previewUrl },
    };
    // –í–ê–ñ–õ–ò–í–û: /messages (–±–µ–∑ /v1)
    await this.callApi("/messages", payload, `TEXT -> ${to}`);
  }

  /** Cloud-—Ñ–æ—Ä–º–∞—Ç TEMPLATE –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ */
  async sendTemplate(msg: TemplateMessage): Promise<void> {
    const to = this.dryRun && this.testRecipient ? this.testRecipient : msg.to;
    const lang = msg.language ?? this.lang;

    // 1) –ü—Ä–∞–≥–Ω–µ–º–æ —É–Ω–∏–∫–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ /configs/templates —É —Ü–∏–∫–ª—ñ
    let tpl = this.findTemplateInCache(msg.name, lang);

    // 2) –Ø–∫—â–æ –∫–µ—à –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π ‚Äî –æ–¥–Ω–∞ —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ (–ø–æ–∑–∞ —Ü–∏–∫–ª–æ–º –∫—Ä–∞—â–µ primeTemplates())
    if (!tpl && !this.templatesCacheValid()) {
      try {
        await this.primeTemplates();
        tpl = this.findTemplateInCache(msg.name, lang);
      } catch {
        /* —ñ–¥–µ–º–æ –¥–∞–ª—ñ —Ñ–æ–ª–±–µ–∫–æ–º */
      }
    }

    const languageCode = tpl?.language || lang;

    const payload: any = {
      messaging_product: "whatsapp",
      recipient_type: "individual",
      to,
      type: "template",
      template: {
        name: msg.name,
        language: {
          policy: "deterministic", // must-have –¥–ª—è Cloud
          code: languageCode,
        },
      },
    };

    console.log("üì¶ WA PAYLOAD:", JSON.stringify(payload.to, null, 2));
    await this.callApi("/messages", payload, `TEMPLATE(${msg.name}) -> ${to}`);
  }
}
